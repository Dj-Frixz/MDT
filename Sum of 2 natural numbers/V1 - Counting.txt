WARNING: Accepts only two numbers delimited by a " " as input!

States:
0 → (initial state) moves the reading/writing head (rwh) from any digit of the 1st number to the leftmost digit of the 2nd number
1 → (follows state <0>) moves the rwh to the rightmost digit of the 2nd number
2 → moves the rwh from the rightmost digit of the 2nd number to the rightmost of the 1st number
d → (difference) subtracts 1
s → (sum) adds 1
c → (cancel) 
f → end-state

(0,0,0,0,>)
(0,1,0,1,>)
(0,2,0,2,>)
(0,3,0,3,>)
(0,4,0,4,>)
(0,5,0,5,>)
(0,6,0,6,>)
(0,7,0,7,>)
(0,8,0,8,>)
(0,9,0,9,>)
(0,-,1,-,>)
(1,0,1,0,>)
(1,1,1,1,>)
(1,2,1,2,>)
(1,3,1,3,>)
(1,4,1,4,>)
(1,5,1,5,>)
(1,6,1,6,>)
(1,7,1,7,>)
(1,8,1,8,>)
(1,9,1,9,>)
(1,-,d,-,<)
(d,0,d,9,<)
(d,1,2,0,<)
(d,2,2,1,<)
(d,3,2,2,<)
(d,4,2,3,<)
(d,5,2,4,<)
(d,6,2,5,<)
(d,7,2,6,<)
(d,8,2,7,<)
(d,9,2,8,<)
(d,-,c,-,>)
(2,0,2,0,<)
(2,1,2,1,<)
(2,2,2,2,<)
(2,3,2,3,<)
(2,4,2,4,<)
(2,5,2,5,<)
(2,6,2,6,<)
(2,7,2,7,<)
(2,8,2,8,<)
(2,9,2,9,<)
(2,-,s,-,<)
(s,0,0,1,>)
(s,1,0,2,>)
(s,2,0,3,>)
(s,3,0,4,>)
(s,4,0,5,>)
(s,5,0,6,>)
(s,6,0,7,>)
(s,7,0,8,>)
(s,8,0,9,>)
(s,9,s,0,<)
(s,-,0,1,>)
(c,0,c,-,>)
(c,1,c,-,>)
(c,2,c,-,>)
(c,3,c,-,>)
(c,4,c,-,>)
(c,5,c,-,>)
(c,6,c,-,>)
(c,7,c,-,>)
(c,8,c,-,>)
(c,9,c,-,>)
(c,-,f,-,<)

This Turing machine is pretty simple and works by increasing the left number by 1 while decreasing the right one by 1 every cicle, until the right number is 0 and the left one is the result. The complexity increases as the right number is bigger. Very inefficient, but it does the job.
