**Copy and paste the transition functions of a Turing machine into https://https---www.turingsimulator.net/ to run it**


Sum of 2 natural numbers

WARNING: Accepts only two numbers delimited by a " " as input!

States:
0 → (initial state) moves the reading/writing head (rwh) from any digit of the 1st number to the leftmost digit of the 2nd number
1 → (follows state <0>) moves the rwh to the rightmost digit of the 2nd number
2 → moves the rwh from the rightmost digit of the 2nd number to the rightmost of the 1st number
d → (difference) subtracts 1
s → (sum) adds 1
c → (cancel) 
f → end-state

(0,0,0,0,>)
(0,1,0,1,>)
(0,2,0,2,>)
(0,3,0,3,>)
(0,4,0,4,>)
(0,5,0,5,>)
(0,6,0,6,>)
(0,7,0,7,>)
(0,8,0,8,>)
(0,9,0,9,>)
(0,-,1,-,>)
(1,0,1,0,>)
(1,1,1,1,>)
(1,2,1,2,>)
(1,3,1,3,>)
(1,4,1,4,>)
(1,5,1,5,>)
(1,6,1,6,>)
(1,7,1,7,>)
(1,8,1,8,>)
(1,9,1,9,>)
(1,-,d,-,<)
(d,0,d,9,<)
(d,1,2,0,<)
(d,2,2,1,<)
(d,3,2,2,<)
(d,4,2,3,<)
(d,5,2,4,<)
(d,6,2,5,<)
(d,7,2,6,<)
(d,8,2,7,<)
(d,9,2,8,<)
(d,-,c,-,>)
(2,0,2,0,<)
(2,1,2,1,<)
(2,2,2,2,<)
(2,3,2,3,<)
(2,4,2,4,<)
(2,5,2,5,<)
(2,6,2,6,<)
(2,7,2,7,<)
(2,8,2,8,<)
(2,9,2,9,<)
(2,-,s,-,<)
(s,0,0,1,>)
(s,1,0,2,>)
(s,2,0,3,>)
(s,3,0,4,>)
(s,4,0,5,>)
(s,5,0,6,>)
(s,6,0,7,>)
(s,7,0,8,>)
(s,8,0,9,>)
(s,9,s,0,<)
(s,-,0,1,>)
(c,0,c,-,>)
(c,1,c,-,>)
(c,2,c,-,>)
(c,3,c,-,>)
(c,4,c,-,>)
(c,5,c,-,>)
(c,6,c,-,>)
(c,7,c,-,>)
(c,8,c,-,>)
(c,9,c,-,>)
(c,-,f,-,<)

This Turing machine is pretty simple and works by increasing the left number by 1 while decreasing the right one by 1 every cicle, until the right number is 0 and the left one is the result. The complexity increases as the right number is bigger. Very inefficient, but it does the job.

________________________________________________________________


Sum of 2 natural numbers 2.0

WARNING: Accepts only two numbers delimited by a " " as input!

States:
0 → (initial state) moves the reading/writing head (rwh) from any digit of the 1st number to the leftmost digit of the 2nd number
1 → (follows state <0>) moves the rwh to the rightmost digit of the 2nd number
sc/sc0 → moves the rwh from the rightmost digit of the 2nd number to the rightmost digit/char of the 1st number
diff → (difference) subtracts 1
sum → adds 1 on the rightmost digit found
conv → converts digits to characters of the alphabet (0,1,2,...,9 → z,a,b,...,i)
unc → converts characters to digits
stop → end-state

(0,0,0,0,>)
(0,1,0,1,>)
(0,2,0,2,>)
(0,3,0,3,>)
(0,4,0,4,>)
(0,5,0,5,>)
(0,6,0,6,>)
(0,7,0,7,>)
(0,8,0,8,>)
(0,9,0,9,>)
(0,-,1,-,>)
(0,a,0,a,>)
(0,b,0,b,>)
(0,c,0,c,>)
(0,d,0,d,>)
(0,e,0,e,>)
(0,f,0,f,>)
(0,g,0,g,>)
(0,h,0,h,>)
(0,i,0,i,>)
(0,z,0,z,>)
(1,0,1,0,>)
(1,1,1,1,>)
(1,2,1,2,>)
(1,3,1,3,>)
(1,4,1,4,>)
(1,5,1,5,>)
(1,6,1,6,>)
(1,7,1,7,>)
(1,8,1,8,>)
(1,9,1,9,>)
(1,-,diff,-,<)
(diff,0,sc0,-,<)
(diff,1,sc,0,<)
(diff,2,sc,1,<)
(diff,3,sc,2,<)
(diff,4,sc,3,<)
(diff,5,sc,4,<)
(diff,6,sc,5,<)
(diff,7,sc,6,<)
(diff,8,sc,7,<)
(diff,9,sc,8,<)
(diff,-,unc,-,<)
(sc,0,sc,0,<)
(sc,1,sc,1,<)
(sc,2,sc,2,<)
(sc,3,sc,3,<)
(sc,4,sc,4,<)
(sc,5,sc,5,<)
(sc,6,sc,6,<)
(sc,7,sc,7,<)
(sc,8,sc,8,<)
(sc,9,sc,9,<)
(sc,-,sum,-,<)
(sc0,0,sc0,0,<)
(sc0,1,sc0,1,<)
(sc0,2,sc0,2,<)
(sc0,3,sc0,3,<)
(sc0,4,sc0,4,<)
(sc0,5,sc0,5,<)
(sc0,6,sc0,6,<)
(sc0,7,sc0,7,<)
(sc0,8,sc0,8,<)
(sc0,9,sc0,9,<)
(sc0,-,conv,-,<)
(sum,0,0,1,>)
(sum,1,0,2,>)
(sum,2,0,3,>)
(sum,3,0,4,>)
(sum,4,0,5,>)
(sum,5,0,6,>)
(sum,6,0,7,>)
(sum,7,0,8,>)
(sum,8,0,9,>)
(sum,9,sum,0,<)
(sum,-,0,1,>)
(sum,a,sum,a,<)
(sum,b,sum,b,<)
(sum,c,sum,c,<)
(sum,d,sum,d,<)
(sum,e,sum,e,<)
(sum,f,sum,f,<)
(sum,g,sum,g,<)
(sum,h,sum,h,<)
(sum,i,sum,i,<)
(sum,z,sum,z,<)
(conv,0,0,z,>)
(conv,1,0,a,>)
(conv,2,0,b,>)
(conv,3,0,c,>)
(conv,4,0,d,>)
(conv,5,0,e,>)
(conv,6,0,f,>)
(conv,7,0,g,>)
(conv,8,0,h,>)
(conv,9,0,i,>)
(conv,a,conv,a,<)
(conv,b,conv,b,<)
(conv,c,conv,c,<)
(conv,d,conv,d,<)
(conv,e,conv,e,<)
(conv,f,conv,f,<)
(conv,g,conv,g,<)
(conv,h,conv,h,<)
(conv,i,conv,i,<)
(conv,z,conv,z,<)
(unc,a,unc,1,<)
(unc,b,unc,2,<)
(unc,c,unc,3,<)
(unc,d,unc,4,<)
(unc,e,unc,5,<)
(unc,f,unc,6,<)
(unc,g,unc,7,<)
(unc,h,unc,8,<)
(unc,i,unc,9,<)
(unc,z,unc,0,<)
(unc,-,stop,-,>)

The concept here is to simulate how humans calculate a sum, so adding firstly the units, secondly the tens, than the hundreds and so on. The complexity depends on how big are the digits of the number on the right. For example "100+99" would take more time than "100+1111".

________________________________________________________________


Sum of 2 natural numbers 3.0

(Accepts also two numbers delimited by a "+" as input)

States:
0 → (initial state) moves the reading/writing head (rwh) from any digit of the 1st number to the leftmost digit of the 2nd number
1 → (follows state <0>) moves the rwh to the rightmost digit of the 2nd number
rec → (recognition) choose an internal state (n0,...,n9) depending on the digit read
n0,n1,...,n9 → moves the rwh from the rightmost digit of the 2nd number to the rightmost digit/char of the 1st number
+0,+1,...,+9 → adds a number to the rightmost digit of the first number
find → finds the rightmost digit of the 1st number
conv → converts digits to characters of the alphabet (0,1,2,...,9 → z,a,b,...,i)
dec → (decipher) converts characters to digits
stop → end-state

(0,0,0,0,>)
(0,1,0,1,>)
(0,2,0,2,>)
(0,3,0,3,>)
(0,4,0,4,>)
(0,5,0,5,>)
(0,6,0,6,>)
(0,7,0,7,>)
(0,8,0,8,>)
(0,9,0,9,>)
(0,-,1,+,>)
(0,+,1,+,>)
(0,a,0,a,>)
(0,b,0,b,>)
(0,c,0,c,>)
(0,d,0,d,>)
(0,e,0,e,>)
(0,f,0,f,>)
(0,g,0,g,>)
(0,h,0,h,>)
(0,i,0,i,>)
(0,z,0,z,>)
(1,0,1,0,>)
(1,1,1,1,>)
(1,2,1,2,>)
(1,3,1,3,>)
(1,4,1,4,>)
(1,5,1,5,>)
(1,6,1,6,>)
(1,7,1,7,>)
(1,8,1,8,>)
(1,9,1,9,>)
(1,-,rec,-,<)
(rec,0,n0,-,<)
(rec,1,n1,-,<)
(rec,2,n2,-,<)
(rec,3,n3,-,<)
(rec,4,n4,-,<)
(rec,5,n5,-,<)
(rec,6,n6,-,<)
(rec,7,n7,-,<)
(rec,8,n8,-,<)
(rec,9,n9,-,<)
(rec,+,dec,-,<)
(n0,0,n0,0,<)
(n0,1,n0,1,<)
(n0,2,n0,2,<)
(n0,3,n0,3,<)
(n0,4,n0,4,<)
(n0,5,n0,5,<)
(n0,6,n0,6,<)
(n0,7,n0,7,<)
(n0,8,n0,8,<)
(n0,9,n0,9,<)
(n0,+,conv,+,<)
(n1,0,n1,0,<)
(n1,1,n1,1,<)
(n1,2,n1,2,<)
(n1,3,n1,3,<)
(n1,4,n1,4,<)
(n1,5,n1,5,<)
(n1,6,n1,6,<)
(n1,7,n1,7,<)
(n1,8,n1,8,<)
(n1,9,n1,9,<)
(n1,+,+1,+,<)
(n2,0,n2,0,<)
(n2,1,n2,1,<)
(n2,2,n2,2,<)
(n2,3,n2,3,<)
(n2,4,n2,4,<)
(n2,5,n2,5,<)
(n2,6,n2,6,<)
(n2,7,n2,7,<)
(n2,8,n2,8,<)
(n2,9,n2,9,<)
(n2,+,+2,+,<)
(n3,0,n3,0,<)
(n3,1,n3,1,<)
(n3,2,n3,2,<)
(n3,3,n3,3,<)
(n3,4,n3,4,<)
(n3,5,n3,5,<)
(n3,6,n3,6,<)
(n3,7,n3,7,<)
(n3,8,n3,8,<)
(n3,9,n3,9,<)
(n3,+,+3,+,<)
(n4,0,n4,0,<)
(n4,1,n4,1,<)
(n4,2,n4,2,<)
(n4,3,n4,3,<)
(n4,4,n4,4,<)
(n4,5,n4,5,<)
(n4,6,n4,6,<)
(n4,7,n4,7,<)
(n4,8,n4,8,<)
(n4,9,n4,9,<)
(n4,+,+4,+,<)
(n5,0,n5,0,<)
(n5,1,n5,1,<)
(n5,2,n5,2,<)
(n5,3,n5,3,<)
(n5,4,n5,4,<)
(n5,5,n5,5,<)
(n5,6,n5,6,<)
(n5,7,n5,7,<)
(n5,8,n5,8,<)
(n5,9,n5,9,<)
(n5,+,+5,+,<)
(n6,0,n6,0,<)
(n6,1,n6,1,<)
(n6,2,n6,2,<)
(n6,3,n6,3,<)
(n6,4,n6,4,<)
(n6,5,n6,5,<)
(n6,6,n6,6,<)
(n6,7,n6,7,<)
(n6,8,n6,8,<)
(n6,9,n6,9,<)
(n6,+,+6,+,<)
(n7,0,n7,0,<)
(n7,1,n7,1,<)
(n7,2,n7,2,<)
(n7,3,n7,3,<)
(n7,4,n7,4,<)
(n7,5,n7,5,<)
(n7,6,n7,6,<)
(n7,7,n7,7,<)
(n7,8,n7,8,<)
(n7,9,n7,9,<)
(n7,+,+7,+,<)
(n8,0,n8,0,<)
(n8,1,n8,1,<)
(n8,2,n8,2,<)
(n8,3,n8,3,<)
(n8,4,n8,4,<)
(n8,5,n8,5,<)
(n8,6,n8,6,<)
(n8,7,n8,7,<)
(n8,8,n8,8,<)
(n8,9,n8,9,<)
(n8,+,+8,+,<)
(n0,0,n0,0,<)
(n9,1,n9,1,<)
(n9,2,n9,2,<)
(n9,3,n9,3,<)
(n9,4,n9,4,<)
(n9,5,n9,5,<)
(n9,6,n9,6,<)
(n9,7,n9,7,<)
(n9,8,n9,8,<)
(n9,9,n9,9,<)
(n9,+,+9,+,<)
(find,0,find,0,>)
(find,1,find,1,>)
(find,2,find,2,>)
(find,3,find,3,>)
(find,4,find,4,>)
(find,5,find,5,>)
(find,6,find,6,>)
(find,7,find,7,>)
(find,8,find,8,>)
(find,9,find,9,>)
(find,+,conv,+,<)
(find,z,conv,z,<)
(find,a,conv,a,<)
(find,b,conv,b,<)
(find,c,conv,c,<)
(find,d,conv,d,<)
(find,e,conv,e,<)
(find,f,conv,f,<)
(find,g,conv,g,<)
(find,h,conv,h,<)
(find,i,conv,i,<)
(conv,0,0,z,>)
(conv,1,0,a,>)
(conv,2,0,b,>)
(conv,3,0,c,>)
(conv,4,0,d,>)
(conv,5,0,e,>)
(conv,6,0,f,>)
(conv,7,0,g,>)
(conv,8,0,h,>)
(conv,9,0,i,>)
(conv,-,0,z,>)
(conv,a,conv,a,<)
(conv,b,conv,b,<)
(conv,c,conv,c,<)
(conv,d,conv,d,<)
(conv,e,conv,e,<)
(conv,f,conv,f,<)
(conv,g,conv,g,<)
(conv,h,conv,h,<)
(conv,i,conv,i,<)
(conv,z,conv,z,<)
(dec,z,dec,0,<)
(dec,a,dec,1,<)
(dec,b,dec,2,<)
(dec,c,dec,3,<)
(dec,d,dec,4,<)
(dec,e,dec,5,<)
(dec,f,dec,6,<)
(dec,g,dec,7,<)
(dec,h,dec,8,<)
(dec,i,dec,9,<)
(dec,-,stop,-,>)
(dec,0,dec,0,<)
(dec,1,dec,1,<)
(dec,2,dec,2,<)
(dec,3,dec,3,<)
(dec,4,dec,4,<)
(dec,5,dec,5,<)
(dec,6,dec,6,<)
(dec,7,dec,7,<)
(dec,8,dec,8,<)
(dec,9,dec,9,<)
(+1,0,find,1,>)
(+1,1,find,2,>)
(+1,2,find,3,>)
(+1,3,find,4,>)
(+1,4,find,5,>)
(+1,5,find,6,>)
(+1,6,find,7,>)
(+1,7,find,8,>)
(+1,8,find,9,>)
(+1,9,+1,0,<)
(+1,-,find,1,>)
(+1,z,+1,z,<)
(+1,a,+1,a,<)
(+1,b,+1,b,<)
(+1,c,+1,c,<)
(+1,d,+1,d,<)
(+1,e,+1,e,<)
(+1,f,+1,f,<)
(+1,g,+1,g,<)
(+1,h,+1,h,<)
(+1,i,+1,i,<)
(+2,0,find,2,>)
(+2,1,find,3,>)
(+2,2,find,4,>)
(+2,3,find,5,>)
(+2,4,find,6,>)
(+2,5,find,7,>)
(+2,6,find,8,>)
(+2,7,find,9,>)
(+2,8,+1,0,<)
(+2,9,+1,1,<)
(+2,-,find,2,>)
(+2,z,+2,z,<)
(+2,a,+2,a,<)
(+2,b,+2,b,<)
(+2,c,+2,c,<)
(+2,d,+2,d,<)
(+2,e,+2,e,<)
(+2,f,+2,f,<)
(+2,g,+2,g,<)
(+2,h,+2,h,<)
(+2,i,+2,i,<)
(+3,0,find,3,>)
(+3,1,find,4,>)
(+3,2,find,5,>)
(+3,3,find,6,>)
(+3,4,find,7,>)
(+3,5,find,8,>)
(+3,6,find,9,>)
(+3,7,+1,0,<)
(+3,8,+1,1,<)
(+3,9,+1,2,<)
(+3,-,find,3,>)
(+3,z,+3,z,<)
(+3,a,+3,a,<)
(+3,b,+3,b,<)
(+3,c,+3,c,<)
(+3,d,+3,d,<)
(+3,e,+3,e,<)
(+3,f,+3,f,<)
(+3,g,+3,g,<)
(+3,h,+3,h,<)
(+3,i,+3,i,<)
(+4,0,find,4,>)
(+4,1,find,5,>)
(+4,2,find,6,>)
(+4,3,find,7,>)
(+4,4,find,8,>)
(+4,5,find,9,>)
(+4,6,+1,0,<)
(+4,7,+1,1,<)
(+4,8,+1,2,<)
(+4,9,+1,3,<)
(+4,-,find,4,>)
(+4,z,+4,z,<)
(+4,a,+4,a,<)
(+4,b,+4,b,<)
(+4,c,+4,c,<)
(+4,d,+4,d,<)
(+4,e,+4,e,<)
(+4,f,+4,f,<)
(+4,g,+4,g,<)
(+4,h,+4,h,<)
(+4,i,+4,i,<)
(+5,0,find,5,>)
(+5,1,find,6,>)
(+5,2,find,7,>)
(+5,3,find,8,>)
(+5,4,find,9,>)
(+5,5,+1,0,<)
(+5,6,+1,1,<)
(+5,7,+1,2,<)
(+5,8,+1,3,<)
(+5,9,+1,4,<)
(+5,-,find,5,>)
(+5,z,+5,z,<)
(+5,a,+5,a,<)
(+5,b,+5,b,<)
(+5,c,+5,c,<)
(+5,d,+5,d,<)
(+5,e,+5,e,<)
(+5,f,+5,f,<)
(+5,g,+5,g,<)
(+5,h,+5,h,<)
(+5,i,+5,i,<)
(+6,0,find,6,>)
(+6,1,find,7,>)
(+6,2,find,8,>)
(+6,3,find,9,>)
(+6,4,+1,0,<)
(+6,5,+1,1,<)
(+6,6,+1,2,<)
(+6,7,+1,3,<)
(+6,8,+1,4,<)
(+6,9,+1,5,<)
(+6,-,find,6,>)
(+6,z,+6,z,<)
(+6,a,+6,a,<)
(+6,b,+6,b,<)
(+6,c,+6,c,<)
(+6,d,+6,d,<)
(+6,e,+6,e,<)
(+6,f,+6,f,<)
(+6,g,+6,g,<)
(+6,h,+6,h,<)
(+6,i,+6,i,<)
(+7,0,find,7,>)
(+7,1,find,8,>)
(+7,2,find,9,>)
(+7,3,+1,0,<)
(+7,4,+1,1,<)
(+7,5,+1,2,<)
(+7,6,+1,3,<)
(+7,7,+1,4,<)
(+7,8,+1,5,<)
(+7,9,+1,6,<)
(+7,-,find,7,>)
(+7,z,+7,z,<)
(+7,a,+7,a,<)
(+7,b,+7,b,<)
(+7,c,+7,c,<)
(+7,d,+7,d,<)
(+7,e,+7,e,<)
(+7,f,+7,f,<)
(+7,g,+7,g,<)
(+7,h,+7,h,<)
(+7,i,+7,i,<)
(+8,0,find,8,>)
(+8,1,find,9,>)
(+8,2,+1,0,<)
(+8,3,+1,1,<)
(+8,4,+1,2,<)
(+8,5,+1,3,<)
(+8,6,+1,4,<)
(+8,7,+1,5,<)
(+8,8,+1,6,<)
(+8,9,+1,7,<)
(+8,-,find,8,>)
(+8,z,+8,z,<)
(+8,a,+8,a,<)
(+8,b,+8,b,<)
(+8,c,+8,c,<)
(+8,d,+8,d,<)
(+8,e,+8,e,<)
(+8,f,+8,f,<)
(+8,g,+8,g,<)
(+8,h,+8,h,<)
(+8,i,+8,i,<)
(+9,0,find,9,>)
(+9,1,+1,0,<)
(+9,2,+1,1,<)
(+9,3,+1,2,<)
(+9,4,+1,3,<)
(+9,5,+1,4,<)
(+9,6,+1,5,<)
(+9,7,+1,6,<)
(+9,8,+1,7,<)
(+9,9,+1,8,<)
(+9,-,find,9,>)
(+9,z,+9,z,<)
(+9,a,+9,a,<)
(+9,b,+9,b,<)
(+9,c,+9,c,<)
(+9,d,+9,d,<)
(+9,e,+9,e,<)
(+9,f,+9,f,<)
(+9,g,+9,g,<)
(+9,h,+9,h,<)
(+9,i,+9,i,<)

In this final update every couple of digits is associated with a specific result, just like a human mind would do. The complexity depends only on the order of magnitude of the right number.

________________________________________________________________


Sum of 2 natural numbers 3.1

-slightly faster than the predecessor

Changes:
There are no states "find" and "conv" anymore, now every sum converts immediately the result and the carry-over has a unique state instead of re-using the "+1" state. Moreover the "+0" state has been added.

(0,0,0,0,>)
(0,1,0,1,>)
(0,2,0,2,>)
(0,3,0,3,>)
(0,4,0,4,>)
(0,5,0,5,>)
(0,6,0,6,>)
(0,7,0,7,>)
(0,8,0,8,>)
(0,9,0,9,>)
(0,-,1,+,>)
(0,+,1,+,>)
(0,a,0,a,>)
(0,b,0,b,>)
(0,c,0,c,>)
(0,d,0,d,>)
(0,e,0,e,>)
(0,f,0,f,>)
(0,g,0,g,>)
(0,h,0,h,>)
(0,i,0,i,>)
(0,z,0,z,>)
(1,0,1,0,>)
(1,1,1,1,>)
(1,2,1,2,>)
(1,3,1,3,>)
(1,4,1,4,>)
(1,5,1,5,>)
(1,6,1,6,>)
(1,7,1,7,>)
(1,8,1,8,>)
(1,9,1,9,>)
(1,-,rec,-,<)
(rec,0,n0,-,<)
(rec,1,n1,-,<)
(rec,2,n2,-,<)
(rec,3,n3,-,<)
(rec,4,n4,-,<)
(rec,5,n5,-,<)
(rec,6,n6,-,<)
(rec,7,n7,-,<)
(rec,8,n8,-,<)
(rec,9,n9,-,<)
(rec,+,dec,-,<)
(n0,0,n0,0,<)
(n0,1,n0,1,<)
(n0,2,n0,2,<)
(n0,3,n0,3,<)
(n0,4,n0,4,<)
(n0,5,n0,5,<)
(n0,6,n0,6,<)
(n0,7,n0,7,<)
(n0,8,n0,8,<)
(n0,9,n0,9,<)
(n0,+,+0,+,<)
(n1,0,n1,0,<)
(n1,1,n1,1,<)
(n1,2,n1,2,<)
(n1,3,n1,3,<)
(n1,4,n1,4,<)
(n1,5,n1,5,<)
(n1,6,n1,6,<)
(n1,7,n1,7,<)
(n1,8,n1,8,<)
(n1,9,n1,9,<)
(n1,+,+1,+,<)
(n2,0,n2,0,<)
(n2,1,n2,1,<)
(n2,2,n2,2,<)
(n2,3,n2,3,<)
(n2,4,n2,4,<)
(n2,5,n2,5,<)
(n2,6,n2,6,<)
(n2,7,n2,7,<)
(n2,8,n2,8,<)
(n2,9,n2,9,<)
(n2,+,+2,+,<)
(n3,0,n3,0,<)
(n3,1,n3,1,<)
(n3,2,n3,2,<)
(n3,3,n3,3,<)
(n3,4,n3,4,<)
(n3,5,n3,5,<)
(n3,6,n3,6,<)
(n3,7,n3,7,<)
(n3,8,n3,8,<)
(n3,9,n3,9,<)
(n3,+,+3,+,<)
(n4,0,n4,0,<)
(n4,1,n4,1,<)
(n4,2,n4,2,<)
(n4,3,n4,3,<)
(n4,4,n4,4,<)
(n4,5,n4,5,<)
(n4,6,n4,6,<)
(n4,7,n4,7,<)
(n4,8,n4,8,<)
(n4,9,n4,9,<)
(n4,+,+4,+,<)
(n5,0,n5,0,<)
(n5,1,n5,1,<)
(n5,2,n5,2,<)
(n5,3,n5,3,<)
(n5,4,n5,4,<)
(n5,5,n5,5,<)
(n5,6,n5,6,<)
(n5,7,n5,7,<)
(n5,8,n5,8,<)
(n5,9,n5,9,<)
(n5,+,+5,+,<)
(n6,0,n6,0,<)
(n6,1,n6,1,<)
(n6,2,n6,2,<)
(n6,3,n6,3,<)
(n6,4,n6,4,<)
(n6,5,n6,5,<)
(n6,6,n6,6,<)
(n6,7,n6,7,<)
(n6,8,n6,8,<)
(n6,9,n6,9,<)
(n6,+,+6,+,<)
(n7,0,n7,0,<)
(n7,1,n7,1,<)
(n7,2,n7,2,<)
(n7,3,n7,3,<)
(n7,4,n7,4,<)
(n7,5,n7,5,<)
(n7,6,n7,6,<)
(n7,7,n7,7,<)
(n7,8,n7,8,<)
(n7,9,n7,9,<)
(n7,+,+7,+,<)
(n8,0,n8,0,<)
(n8,1,n8,1,<)
(n8,2,n8,2,<)
(n8,3,n8,3,<)
(n8,4,n8,4,<)
(n8,5,n8,5,<)
(n8,6,n8,6,<)
(n8,7,n8,7,<)
(n8,8,n8,8,<)
(n8,9,n8,9,<)
(n8,+,+8,+,<)
(n9,0,n9,0,<)
(n9,1,n9,1,<)
(n9,2,n9,2,<)
(n9,3,n9,3,<)
(n9,4,n9,4,<)
(n9,5,n9,5,<)
(n9,6,n9,6,<)
(n9,7,n9,7,<)
(n9,8,n9,8,<)
(n9,9,n9,9,<)
(n9,+,+9,+,<)
(dec,z,dec,0,<)
(dec,a,dec,1,<)
(dec,b,dec,2,<)
(dec,c,dec,3,<)
(dec,d,dec,4,<)
(dec,e,dec,5,<)
(dec,f,dec,6,<)
(dec,g,dec,7,<)
(dec,h,dec,8,<)
(dec,i,dec,9,<)
(dec,-,stop,-,>)
(dec,0,dec,0,<)
(dec,1,dec,1,<)
(dec,2,dec,2,<)
(dec,3,dec,3,<)
(dec,4,dec,4,<)
(dec,5,dec,5,<)
(dec,6,dec,6,<)
(dec,7,dec,7,<)
(dec,8,dec,8,<)
(dec,9,dec,9,<)
(car,0,0,1,>)
(car,1,0,2,>)
(car,2,0,3,>)
(car,3,0,4,>)
(car,4,0,5,>)
(car,5,0,6,>)
(car,6,0,7,>)
(car,7,0,8,>)
(car,8,0,9,>)
(car,9,car,0,<)
(car,-,0,1,>)
(+0,0,0,z,>)
(+0,1,0,a,>)
(+0,2,0,b,>)
(+0,3,0,c,>)
(+0,4,0,d,>)
(+0,5,0,e,>)
(+0,6,0,f,>)
(+0,7,0,g,>)
(+0,8,0,h,>)
(+0,9,0,i,>)
(+0,-,0,z,>)
(+0,a,+0,a,<)
(+0,b,+0,b,<)
(+0,c,+0,c,<)
(+0,d,+0,d,<)
(+0,e,+0,e,<)
(+0,f,+0,f,<)
(+0,g,+0,g,<)
(+0,h,+0,h,<)
(+0,i,+0,i,<)
(+0,z,+0,z,<)
(+1,0,0,a,>)
(+1,1,0,b,>)
(+1,2,0,c,>)
(+1,3,0,d,>)
(+1,4,0,e,>)
(+1,5,0,f,>)
(+1,6,0,g,>)
(+1,7,0,h,>)
(+1,8,0,i,>)
(+1,9,car,z,<)
(+1,-,0,a,>)
(+1,z,+1,z,<)
(+1,a,+1,a,<)
(+1,b,+1,b,<)
(+1,c,+1,c,<)
(+1,d,+1,d,<)
(+1,e,+1,e,<)
(+1,f,+1,f,<)
(+1,g,+1,g,<)
(+1,h,+1,h,<)
(+1,i,+1,i,<)
(+2,0,0,b,>)
(+2,1,0,c,>)
(+2,2,0,d,>)
(+2,3,0,e,>)
(+2,4,0,f,>)
(+2,5,0,g,>)
(+2,6,0,h,>)
(+2,7,0,i,>)
(+2,8,car,z,<)
(+2,9,car,a,<)
(+2,-,0,b,>)
(+2,z,+2,z,<)
(+2,a,+2,a,<)
(+2,b,+2,b,<)
(+2,c,+2,c,<)
(+2,d,+2,d,<)
(+2,e,+2,e,<)
(+2,f,+2,f,<)
(+2,g,+2,g,<)
(+2,h,+2,h,<)
(+2,i,+2,i,<)
(+3,0,0,c,>)
(+3,1,0,d,>)
(+3,2,0,e,>)
(+3,3,0,f,>)
(+3,4,0,g,>)
(+3,5,0,h,>)
(+3,6,0,i,>)
(+3,7,car,z,<)
(+3,8,car,a,<)
(+3,9,car,b,<)
(+3,-,0,c,>)
(+3,z,+3,z,<)
(+3,a,+3,a,<)
(+3,b,+3,b,<)
(+3,c,+3,c,<)
(+3,d,+3,d,<)
(+3,e,+3,e,<)
(+3,f,+3,f,<)
(+3,g,+3,g,<)
(+3,h,+3,h,<)
(+3,i,+3,i,<)
(+4,0,0,d,>)
(+4,1,0,e,>)
(+4,2,0,f,>)
(+4,3,0,g,>)
(+4,4,0,h,>)
(+4,5,0,i,>)
(+4,6,car,z,<)
(+4,7,car,a,<)
(+4,8,car,b,<)
(+4,9,car,c,<)
(+4,-,0,d,>)
(+4,z,+4,z,<)
(+4,a,+4,a,<)
(+4,b,+4,b,<)
(+4,c,+4,c,<)
(+4,d,+4,d,<)
(+4,e,+4,e,<)
(+4,f,+4,f,<)
(+4,g,+4,g,<)
(+4,h,+4,h,<)
(+4,i,+4,i,<)
(+5,0,0,e,>)
(+5,1,0,f,>)
(+5,2,0,g,>)
(+5,3,0,h,>)
(+5,4,0,i,>)
(+5,5,car,z,<)
(+5,6,car,a,<)
(+5,7,car,b,<)
(+5,8,car,c,<)
(+5,9,car,d,<)
(+5,-,0,e,>)
(+5,z,+5,z,<)
(+5,a,+5,a,<)
(+5,b,+5,b,<)
(+5,c,+5,c,<)
(+5,d,+5,d,<)
(+5,e,+5,e,<)
(+5,f,+5,f,<)
(+5,g,+5,g,<)
(+5,h,+5,h,<)
(+5,i,+5,i,<)
(+6,0,0,f,>)
(+6,1,0,g,>)
(+6,2,0,h,>)
(+6,3,0,i,>)
(+6,4,car,z,<)
(+6,5,car,a,<)
(+6,6,car,b,<)
(+6,7,car,c,<)
(+6,8,car,d,<)
(+6,9,car,e,<)
(+6,-,0,f,>)
(+6,z,+6,z,<)
(+6,a,+6,a,<)
(+6,b,+6,b,<)
(+6,c,+6,c,<)
(+6,d,+6,d,<)
(+6,e,+6,e,<)
(+6,f,+6,f,<)
(+6,g,+6,g,<)
(+6,h,+6,h,<)
(+6,i,+6,i,<)
(+7,0,0,g,>)
(+7,1,0,h,>)
(+7,2,0,i,>)
(+7,3,car,z,<)
(+7,4,car,a,<)
(+7,5,car,b,<)
(+7,6,car,c,<)
(+7,7,car,d,<)
(+7,8,car,e,<)
(+7,9,car,f,<)
(+7,-,0,g,>)
(+7,z,+7,z,<)
(+7,a,+7,a,<)
(+7,b,+7,b,<)
(+7,c,+7,c,<)
(+7,d,+7,d,<)
(+7,e,+7,e,<)
(+7,f,+7,f,<)
(+7,g,+7,g,<)
(+7,h,+7,h,<)
(+7,i,+7,i,<)
(+8,0,0,h,>)
(+8,1,0,i,>)
(+8,2,car,z,<)
(+8,3,car,a,<)
(+8,4,car,b,<)
(+8,5,car,c,<)
(+8,6,car,d,<)
(+8,7,car,e,<)
(+8,8,car,f,<)
(+8,9,car,g,<)
(+8,-,0,h,>)
(+8,z,+8,z,<)
(+8,a,+8,a,<)
(+8,b,+8,b,<)
(+8,c,+8,c,<)
(+8,d,+8,d,<)
(+8,e,+8,e,<)
(+8,f,+8,f,<)
(+8,g,+8,g,<)
(+8,h,+8,h,<)
(+8,i,+8,i,<)
(+9,0,0,i,>)
(+9,1,car,z,<)
(+9,2,car,a,<)
(+9,3,car,b,<)
(+9,4,car,c,<)
(+9,5,car,d,<)
(+9,6,car,e,<)
(+9,7,car,f,<)
(+9,8,car,g,<)
(+9,9,car,h,<)
(+9,-,0,i,>)
(+9,z,+9,z,<)
(+9,a,+9,a,<)
(+9,b,+9,b,<)
(+9,c,+9,c,<)
(+9,d,+9,d,<)
(+9,e,+9,e,<)
(+9,f,+9,f,<)
(+9,g,+9,g,<)
(+9,h,+9,h,<)
(+9,i,+9,i,<)

________________________________________________________________


EXTRA: Simple (slow) conversion dec to bin

(0,0,0,0,>)
(0,1,0,1,>)
(0,2,0,2,>)
(0,3,0,3,>)
(0,4,0,4,>)
(0,5,0,5,>)
(0,6,0,6,>)
(0,7,0,7,>)
(0,8,0,8,>)
(0,9,0,9,>)
(0,-,1,-,<)
(0,=,0,=,>)
(1,1,2,0,<)
(1,2,2,1,<)
(1,3,2,2,<)
(1,4,2,3,<)
(1,5,2,4,<)
(1,6,2,5,<)
(1,7,2,6,<)
(1,8,2,7,<)
(1,9,2,8,<)
(1,0,1,9,<)
(1,=,4,=,>)
(1,-,6,=,<)
(2,0,2,0,<)
(2,1,2,1,<)
(2,2,2,2,<)
(2,3,2,3,<)
(2,4,2,4,<)
(2,5,2,5,<)
(2,6,2,6,<)
(2,7,2,7,<)
(2,8,2,8,<)
(2,9,2,9,<)
(2,-,3,=,<)
(2,=,3,=,<)
(3,-,0,1,>)
(3,0,0,1,>)
(3,1,3,0,<)
(4,9,4,9,>)
(4,-,5,-,<)
(5,9,5,-,<)
(5,=,7,-,<)
(6,-,6,0,>)
(6,=,4,=,>)

This Turing machine converts in a pretty slow but simple way: it just subtracts 1 base 10 on the number inserted (on the right) while adding 1 base 2 one the binary number generated on the left, which is "inizialized" at zero. The execution stops when the decimal number is 0. The complexity increases according to the size of the number inserted.

